[
["index.html", "Introduction to Python Chapter 1 INTRO", " Introduction to Python Łukasz Muszyński 2019-09-11 Chapter 1 INTRO Different IT tools "],
["intro-1.html", "Chapter 2 INTRO", " Chapter 2 INTRO "],
["chapter.html", "Chapter 3 chapter", " Chapter 3 chapter C:/Users/memy/OneDrive/Pulpit/1_Programs_and_programing/GIT/git_test/repo1 "],
["zmiany-jakie-sa-w-stageu-wzgledem-tego-to-jest-przed-poczekalnia.html", "Chapter 4 zmiany jakie sa w stageu wzgledem tego to jest przed poczekalnia", " Chapter 4 zmiany jakie sa w stageu wzgledem tego to jest przed poczekalnia git diff "],
["zmiany-jakie-sa-w-stagu-wzgledem-poprzedniego-commitu.html", "Chapter 5 zmiany jakie sa w stagu wzgledem poprzedniego commitu", " Chapter 5 zmiany jakie sa w stagu wzgledem poprzedniego commitu git diff –staged "],
["roznice-miedzy-diffami.html", "Chapter 6 roznice miedzy diffami", " Chapter 6 roznice miedzy diffami git diff branch_1 branch_2 "],
["zmiany-w-konkretnym-commicie.html", "Chapter 7 zmiany w konkretnym commicie", " Chapter 7 zmiany w konkretnym commicie git show hash_7 "],
["roznice-miedzy-dwoma-zadanymi-commitami.html", "Chapter 8 roznice miedzy dwoma zadanymi commitami", " Chapter 8 roznice miedzy dwoma zadanymi commitami git diff hash_7_1 hash_7_2 "],
["roznica-miedzy-zadanym-commitem-i-commitem-na-ktorym-jest-wskaznik.html", "Chapter 9 roznica miedzy zadanym commitem i commitem na ktorym jest wskaznik", " Chapter 9 roznica miedzy zadanym commitem i commitem na ktorym jest wskaznik git diff hash_7 HEAD "],
["cofniecie-pliku-z-stage-poczekalni.html", "Chapter 10 cofniecie pliku z stage (poczekalni)", " Chapter 10 cofniecie pliku z stage (poczekalni) git reset HEAD nazwa_pliki "],
["dodanie-do-stage-wszystkich-modyfikacji.html", "Chapter 11 dodanie do stage wszystkich modyfikacji", " Chapter 11 dodanie do stage wszystkich modyfikacji git add . "],
["dodanie-do-stage-modyfikacji-w-konkretnym-pliku.html", "Chapter 12 dodanie do stage modyfikacji w konkretnym pliku", " Chapter 12 dodanie do stage modyfikacji w konkretnym pliku git add naza_pliku "],
["commit-dla-konkretnego-pliku.html", "Chapter 13 commit dla konkretnego pliku", " Chapter 13 commit dla konkretnego pliku git commit nazwa_pliku -m ‘.’ "],
["add-i-commit-w-jednej-komendzie.html", "Chapter 14 add i commit w jednej komendzie", " Chapter 14 add i commit w jednej komendzie git commit -am “comment” "],
["lista-commits.html", "Chapter 15 lista commits", " Chapter 15 lista commits git log "],
["lista-commitow-dla-konkretnego-pliku.html", "Chapter 16 lista commitow dla konkretnego pliku", " Chapter 16 lista commitow dla konkretnego pliku git log nazwa_pliku "],
["lista-commitow-dla-konkretnego-brancha-tutaj-master.html", "Chapter 17 lista commitow dla konkretnego brancha (tutaj ‘master’)", " Chapter 17 lista commitow dla konkretnego brancha (tutaj ‘master’) git log master "],
["lista-repozytoriow-zdalnych.html", "Chapter 18 lista repozytoriow zdalnych", " Chapter 18 lista repozytoriow zdalnych git remote -v "],
["dodanie-zdalnego-repo.html", "Chapter 19 dodanie zdalnego repo", " Chapter 19 dodanie zdalnego repo git remote add origin git@github.com:USERNAME/REPOSITORY.git "],
["zmiana-url-dla-istniejacego-polaczenia.html", "Chapter 20 zmiana url dla istniejącego polaczenia", " Chapter 20 zmiana url dla istniejącego polaczenia git remote set-url origin git@github.com:USERNAME/REPOSITORY.git "],
["usuniecie-zdalnego-repo-ktore-przy-laczeniu-nazwalismy-origin.html", "Chapter 21 usuniecie zdalnego repo ktore przy laczeniu nazwalismy ‘origin’", " Chapter 21 usuniecie zdalnego repo ktore przy laczeniu nazwalismy ‘origin’ git remote rm origin "],
["modyfikacja-do-komentarza-w-ostatniej-zmienia.html", "Chapter 22 modyfikacja do komentarza w ostatniej zmienia", " Chapter 22 modyfikacja do komentarza w ostatniej zmienia git commit –amend W chodzę w VIM w tryb umozliwiajacy zmiany i poprawiam pierwsze linijke gdzie jest komentarz. Naciskam i potem :wq i "],
["lista-lokalnych-branchow.html", "Chapter 23 lista lokalnych branchow", " Chapter 23 lista lokalnych branchow git branch "],
["lista-wszyskich-branchow-brankche-zdalne-sa-na-czerwowo.html", "Chapter 24 lista wszyskich branchow ( brankche zdalne są na czerwowo)", " Chapter 24 lista wszyskich branchow ( brankche zdalne są na czerwowo) git branch –all "],
["przelaczenie-sie-na-inny-branch.html", "Chapter 25 przelaczenie sie na inny branch", " Chapter 25 przelaczenie sie na inny branch git checkout "],
["utworzenie-nowego-brancha-i-przelaczenie-sie-na-niego.html", "Chapter 26 utworzenie nowego brancha i przelaczenie sie na niego", " Chapter 26 utworzenie nowego brancha i przelaczenie sie na niego git checkout -b "],
["utworzenie-nowego-brancha-bez-przelaczenie-sie-na-niego.html", "Chapter 27 utworzenie nowego brancha bez przelaczenie sie na niego", " Chapter 27 utworzenie nowego brancha bez przelaczenie sie na niego git branch "],
["usuniecie-brancha.html", "Chapter 28 usuniecie brancha", " Chapter 28 usuniecie brancha git branch -d branch_name git branch -D branch_name "],
["usuniecie-zdalnego-brancha.html", "Chapter 29 usuniecie zdalnego brancha", " Chapter 29 usuniecie zdalnego brancha git push –delete "],
["przesuniecie-wskaznika-na-commit-i-potem-powrot-do-head.html", "Chapter 30 przesuniecie wskaznika na commit i potem powrot do HEAD", " Chapter 30 przesuniecie wskaznika na commit i potem powrot do HEAD git checkout a7eb01a3 git checkout master "],
["cofniecie-zmien-do-zadanego-commitu-na-danym-branchu.html", "Chapter 31 cofniecie zmien do zadanego commitu na danym branchu", " Chapter 31 cofniecie zmien do zadanego commitu na danym branchu git checkout master git reset –hard 1258f0d0aae "],
["cofniecie-wskaznika-na-stary-commit-i-utworzenie-od-niego-branch-a.html", "Chapter 32 cofniecie wskaznika na stary commit i utworzenie od niego branch-a", " Chapter 32 cofniecie wskaznika na stary commit i utworzenie od niego branch-a git checkout 0d1d7fc32 git checkout -b old-state 0d1d7fc32 "],
["this-will-destroy-any-local-modifications-.html", "Chapter 33 This will destroy any local modifications.", " Chapter 33 This will destroy any local modifications. "],
["dont-do-it-if-you-have-uncommitted-work-you-want-to-keep-.html", "Chapter 34 Don’t do it if you have uncommitted work you want to keep.", " Chapter 34 Don’t do it if you have uncommitted work you want to keep. git reset –hard 0d1d7fc32 "],
["alternatively-if-theres-work-to-keep.html", "Chapter 35 Alternatively, if there’s work to keep:", " Chapter 35 Alternatively, if there’s work to keep: git stash git reset –hard 0d1d7fc32 git stash pop # This saves the modifications, then reapplies that patch after resetting. # You could get merge conflicts, if you’ve modified things which were # changed since the commit you reset to. "],
["zlaczenie-brancha-prod-do-biezacego-brancha.html", "Chapter 36 zlaczenie brancha ‘prod’ do biezacego brancha", " Chapter 36 zlaczenie brancha ‘prod’ do biezacego brancha git merge prod "],
["zaprzestanie-procesu-mergowania.html", "Chapter 37 zaprzestanie procesu mergowania", " Chapter 37 zaprzestanie procesu mergowania git merge -abort Between the &lt;&lt;&lt;&lt;&lt;&lt;&lt; and =======, you will find the version as per the changes in your current branch, relative to the base commit. Between the ======= and &gt;&gt;&gt;&gt;&gt;&gt;&gt;, you will find the version according to the other branch, relative to the base commit. For convenience, after the &lt;&lt;&lt;&lt;&lt;&lt;&lt; and &gt;&gt;&gt;&gt;&gt;&gt;&gt; markers, you will see hints as to which commit that part of the conflict stems from, HEAD of course being the current revision. ++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ++abcgh ++======= ++abcdef ++&gt;&gt;&gt;&gt;&gt;&gt;&gt; prod revert vs reset Let’s say you had commits: C B A git revert B, will create a commit that undoes changes in B. git revert A, will create a commit that undoes changes in A, but will not touch changes in B Note that if changes in B are dependent on changes in A, the revert of A is not possible. git reset –soft A, will change the commit history and repository; staging and working directory will still be at state of C. git reset –mixed A, will change the commit history, repository, and staging; working directory will still be at state of C. git reset –hard A, will change the commit history, repository, staging and working directory; you will go back to the state of A completely. rebase - po nim tez trzeba rozwiazywac konflikty git diff /smietnik/ 109 To see the difference between: Your working copy and staging area: % git diff Staging area and the latest commit: % git diff –staged Your working copy and commit 4ac0a6733: % git diff 4ac0a6733 Commit 4ac0a6733 and the latest commit: % git diff 4ac0a6733 HEAD Commit 4ac0a6733 and commit 826793951 % git diff 4ac0a6733 826793951 "],
["installing.html", "Chapter 38 Installing", " Chapter 38 Installing Download sonarqube Doanload sonnar scanner (this is not the same as sonarqube) Download open jdk For jdk create environmental variable JAVA_HOME (value: C:-12.02), and path : C:-12.02 Check if you have access to proper Java in cmd: java -version Unzip sonarqube and sonarscanner in different directories. Crate environmental path for sonnar scanner bin "],
["running.html", "Chapter 39 Running", " Chapter 39 Running Run bat file in C:Files-7.9.1-7.9.1-x86-64.bat In Browres start page: http://localhost:9000/ Log in with password: admin and login: admin "],
["project.html", "Chapter 40 Project", " Chapter 40 Project After login click icon ‘+’ in right up corner. Give name to new project and click ‘set up’ generate token select language, OS and you will see blask window with code do copy. Copy it run new cmd if you have Git in folder check if everything is commited !!! go to directory you want to scan in cmd past copied code and press enter (if cmd can not find sonar-scanner.bat then provide full path) on web page after some time new peoject will be created "],
["chapter-1.html", "Chapter 41 chapter", " Chapter 41 chapter "]
]
